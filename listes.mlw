theory Listes
  use  int.Int
  use  list.List
  use  list.Sum
  use  list.Length
  use  list.SortedInt
  use  list.Append   
  use  list.Permut   
  use  list.Mem

  (* Fonctions auxiliaires - inchangÃ©es *)
  let rec taille (l:list int) : int
    ensures {result = length l}
    variant { length l }
  = match l with
    | Nil -> 0
    | Cons _ xs ->
        1 + taille xs
    end

  let rec somme (l:list int) : int
    ensures {result = sum l}
    variant { length l }
  = match l with
    | Nil -> 0
    | Cons x xs ->
        x + somme xs
    end

  let rec fact (n:int) : int
    requires { n >= 0 }
    variant  { n }
    ensures  { result >= 1 }
  = if n = 0 then 1 else n * fact (n - 1)

end

